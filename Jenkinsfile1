// def BUILD_NUMBER=env.BUILD_NUMBER
// def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
// def SFDC_USERNAME

// def HUB_ORG=env.HUB_ORG_DH
// def SFDC_HOST = env.SFDC_HOST_DH
// def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
// def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH

// def SCRATCH_ORG_ALIAS = 'Org11'
// def TEST_LEVEL='RunLocalTests'


// def authenticateDevHub(){
//     script{
//         withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
//             rc = command 'sfdx force:auth:jwt:grant --client-id $CONNECTED_APP_CONSUMER_KEY --username $HUB_ORG --jwt-key-file \"${jwt_key_file}\" --set-default-dev-hub --instanceurl $SFDC_HOST --alias HubOrg' 
//             if (rc != 0) { error 'hub org authorization failed' }

// 			println rc
//         }
//     }
// }
def createSfdxCommands(scriptName){
    script{
        if(isUnix()){
            rc = sh returnStatus: true, script: scriptName
        }else{
            rc = bat returnStatus:true , script: scriptName
        }
    }
}

pipeline{
    agent any 

    options {
        timeout(time: 90, unit: "MINUTES")
        disableConcurrentBuilds()
        // buildDiscarder(logRotator(numToKeepStr:getStandardBuildsToKeep()))
    }
    
    environment {
        HUB_ORG='myquizapp@trailhead.com'
        SFDC_HOST = 'https://login.salesforce.com'
        JWT_KEY_CRED_ID = '36cbf6be-b312-47c5-bfd2-6c438de5438f'
        CONNECTED_APP_CONSUMER_KEY='3MVG9wt4IL4O5wvKsRFviJzUpyxkk1SBOEJCDgJkfvU7wZ5ZUkz51iMd4jUu72Jo.NqRVZQ8cqagodmY7Mpx.'
        SCRATCH_ORG_ALIAS = 'Org12'
        TEST_LEVEL='RunLocalTests'
    }

    parameters {
        string(name: 'DEFAULT_BRANCH', defaultValue: 'Integration', description: 'Defines Default branch')
        string(name: 'RELEASE_BRANCH', defaultValue: 'Release', description: 'Defines Release branch')
        string(name: 'MASTER_BRANCH', defaultValue: 'master', description: 'Defines Master branch')
    }

    stages{
        stage('Test'){
            steps{
                println('connected key' + env.CONNECTED_APP_CONSUMER_KEY)
                            println('Host' + env.SFDC_HOST);
                            println('Hub Org' + env.HUB_ORG)
                            println('JWT ID' + env.JWT_KEY_CRED_ID)
            }
        }
        stage('Authorize Dev hub'){
            steps{
                script{
                    script{
                        withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
                            rc = bat returnStatus:true, script: 'sfdx force:auth:jwt:grant --client-id 3MVG9wt4IL4O5wvKsRFviJzUpyxkk1SBOEJCDgJkfvU7wZ5ZUkz51iMd4jUu72Jo.NqRVZQ8cqagodmY7Mpx. --username myquizapp@trailhead.com --jwt-key-file /openssl/bin/server.key --set-default-dev-hub --instanceurl https://login.salesforce.com --alias HubOrg' 

                            if (rc != 0) { error 'hub org authorization failed' }

			                println rc
                        }
                    }
                }
            }
        }

        stage('Create Scratch Org'){
            steps{
                createSfdxCommands('sf org create scratch --target-dev-hub HubOrg --set-default --definition-file config/project-scratch-def.json --alias env.SCRATCH_ORG_ALIAS --wait 30 --duration-days 1')
            }
        }

        stage('Generate username and password'){
            steps{
                createSfdxCommands('sf org generate password --target-org env.SCRATCH_ORG_ALIAS --length 20')
            }
        }
    }
}